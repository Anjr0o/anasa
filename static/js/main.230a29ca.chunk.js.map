{"version":3,"sources":["logo.svg","Todos/Todos.js","Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","todos","props","onSubmit","submit","type","placeholder","value","onChange","changed","children","todo","React","forwardRef","ref","onClick","click","status","style","className","todoName","App","state","checkedHandler","event","id","todoIndex","findIndex","console","log","strikeThrough","push","splice","setState","handleChange","target","handleSubmit","replace","String","Math","floor","random","preventDefault","Todos","this","map","index","Todo","key","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,4ICc5BC,G,YAZH,SAACC,GACT,OACI,6BACI,kDACA,0BAAMC,SAAUD,EAAME,QAClB,2BAAOC,KAAK,OAAOC,YAAY,sBAAsBC,MAAOL,EAAMK,MAAOC,SAAUN,EAAMO,WAE7F,6BAAMP,EAAMQ,aCKTC,EAVJC,IAAMC,YAAW,SAACX,EAAOY,GAChC,OACI,yBAAKA,IAAKA,GACN,6BACA,0BAAMC,QAASb,EAAMc,OAAQd,EAAMe,OAAnC,KAAkD,0BAAMC,MAAOhB,EAAMgB,MAAOC,UAAWjB,EAAMiB,UACzFJ,QAASb,EAAMc,OAAQd,EAAMkB,c,OC8E9BC,E,4MA7EbC,MAAQ,CACNf,MAAO,GACPN,MAAO,CACL,K,EAIJsB,eAAiB,SAACC,EAAOC,GACvB,IAAMC,EAAY,EAAKJ,MAAMrB,MAAM0B,WAAU,SAAAhB,GAC3C,OAAOA,EAAKc,KAAOA,KAGfd,EAAI,eACL,EAAKW,MAAMrB,MAAMyB,IAGtBE,QAAQC,IAAI,EAAKP,MAAMrB,MAAQ,cAE/BU,EAAKmB,cAAgB,gBACrBnB,EAAKM,OAAS,kBAEd,IAAMhB,EAAK,YAAO,EAAKqB,MAAMrB,OAC7B2B,QAAQC,IAAI5B,GACZA,EAAMyB,GAAaf,EACnBV,EAAM8B,KAAK9B,EAAM+B,OAAON,EAAW,GAAG,IACtC,EAAKO,SAAS,CAAEhC,MAAOA,K,EAGzBiC,aAAe,SAACV,GACd,EAAKS,SAAS,CAAE1B,MAAOiB,EAAMW,OAAO5B,S,EAGtC6B,aAAe,SAACZ,GACd,IAAMC,EAAK,EAAKH,MAAMf,MAAM8B,QAAQ,EAAKf,MAAMf,MAAM,GAAI+B,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,YAChF,EAAKR,SAAS,CACZhC,MAAM,CAAE,CACNwB,GAAIA,EACJL,SAAU,EAAKE,MAAMf,MAErBU,OAAQ,mBACRa,cAAe,KALZ,mBAOA,EAAKR,MAAMrB,UAGlBuB,EAAMkB,kB,uDAGE,IAAD,OACP,OACE,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAACwB,EAAD,CAAOvC,OAAQwC,KAAKR,aAAc7B,MAAOqC,KAAKtB,MAAMf,MAAOE,QAASmC,KAAKV,eACzE,kBAAC,IAAD,KACGU,KAAKtB,MAAMrB,MAAM4C,KAAI,SAAClC,EAAMmC,GAC3B,OAAO,kBAACC,EAAD,CACL5B,UAAWR,EAAKmB,cAChBV,SAAUT,EAAKS,SACfH,OAAQN,EAAKM,OACbD,MAAO,SAACQ,GAAD,OAAW,EAAKD,eAAeC,EAAOb,EAAKc,KAClDuB,IAAKrC,EAAKc,SAGhB,uBACEN,UAAU,WACV8B,KAAK,sBACLd,OAAO,SACPe,IAAI,8B,GAtEEC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.230a29ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nlet todos = (props) => {\n    return (\n        <div>\n            <p>I need to finish...</p>\n            <form onSubmit={props.submit}>\n                <input type=\"text\" placeholder=\"writing a todo list\" value={props.value} onChange={props.changed} />\n            </form>\n            <div>{props.children}</div>\n        </div>\n    )\n}\n\nexport default todos;","import React from 'react';\nimport FlipMove from 'react-flip-move';\n\n\nlet todo = React.forwardRef((props, ref) => {\n    return (\n        <div ref={ref}>\n            <br />\n            <span onClick={props.click}>{props.status} </span><span style={props.style} className={props.className}\n                onClick={props.click}>{props.todoName}</span>\n        </div>\n    )\n})\n\nexport default todo;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todos from './Todos/Todos';\nimport Todo from './Todo/Todo';\nimport FlipMove from 'react-flip-move';\nimport Contact from './Contact/Contact';\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    todos: [\n      {}\n    ],\n  }\n\n  checkedHandler = (event, id) => {\n    const todoIndex = this.state.todos.findIndex(todo => {\n      return todo.id === id;\n    });\n\n    const todo = {\n      ...this.state.todos[todoIndex]\n    };\n\n    console.log(this.state.todos + ' completed');\n    // updates strikethrough effect\n    todo.strikeThrough = 'strikethrough';\n    todo.status = 'I have finished';\n\n    const todos = [...this.state.todos];\n    console.log(todos);\n    todos[todoIndex] = todo;\n    todos.push(todos.splice(todoIndex, 1)[0]);\n    this.setState({ todos: todos })\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    const id = this.state.value.replace(this.state.value[0], String(Math.floor(Math.random() * 1000)));\n    this.setState({\n      todos: [{\n        id: id,\n        todoName: this.state.value,\n        // .charAt(0).toLowerCase() + this.state.value.slice(1), \n        status: 'I need to finish',\n        strikeThrough: ''\n      },\n        ...this.state.todos\n      ]\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <Todos submit={this.handleSubmit} value={this.state.value} changed={this.handleChange} />\n          <FlipMove>\n            {this.state.todos.map((todo, index) => {\n              return <Todo\n                className={todo.strikeThrough}\n                todoName={todo.todoName}\n                status={todo.status}\n                click={(event) => this.checkedHandler(event, todo.id)}\n                key={todo.id} />\n            })}\n          </FlipMove>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}