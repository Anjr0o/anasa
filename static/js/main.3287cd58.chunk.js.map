{"version":3,"sources":["components/Todos/TodoForm.js","components/Todos/Todo/Todo.js","components/Todos/Todos.js","components/Contact/Contact.js","containers/App.js","serviceWorker.js","index.js","containers/App.module.css"],"names":["todos","props","onSubmit","submit","type","placeholder","value","onChange","changed","children","display","todo","React","forwardRef","ref","className","classes","onClick","click","status","style","todoName","map","index","Todo","strikeThrough","event","checked","id","key","contact","App","state","strikethrough","checkedHandler","todoIndex","findIndex","length","splice","push","setState","handleChange","target","handleSubmit","replace","String","Math","floor","random","preventDefault","NavBar","activeClassName","active","to","path","render","TodoForm","Todos","component","Contact","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.3287cd58.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './TodoForm.module.css';\n\nlet todos = (props) => {\n    return (\n        <div>\n            <br/>\n            <span>I need to </span> \n            <form onSubmit={props.submit}>\n                <input type=\"text\" placeholder=\"Write a todo list\" value={props.value} onChange={props.changed} />\n            </form>\n            <div>{props.children}</div>\n            <div display='flex'>\n                <button>All</button><button>Finished</button><button>Unfinished</button>\n            </div>\n        </div>\n    )\n}\n\nexport default todos;","import React from 'react';\nimport classes from '../../../containers/App.module.css';\n\nlet todo = React.forwardRef((props, ref) => {\n    return (\n        <div ref={ref}>\n            <br />\n            <div className={classes.todo}>\n                <span onClick={props.click}>{props.status} </span>\n                <span style={props.style}\n                    className={props.className}\n                    onClick={props.click}>{props.todoName}\n                </span>\n            </div>\n        </div>\n    )\n})\n\nexport default todo;","import React from 'react';\nimport Todo from './Todo/Todo';\nimport FlipMove from 'react-flip-move';\n\nconst todos = (props) =>\n    <FlipMove>{\n        props.todos.map((todo, index) => {\n            return (\n                <Todo\n                    className={todo.strikeThrough}\n                    todoName={todo.todoName}\n                    status={todo.status}\n                    click={(event) => props.checked(event, todo.id)}\n                    key={todo.id} />\n            )\n        })\n    }\n    </FlipMove>\n\nexport default todos;","import React from 'react';\n\nconst contact = () => {\n    return (\n        <p>I'm the contact component!</p>\n    )\n}\n\nexport default contact;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport TodoForm from '../components/Todos/TodoForm';\nimport Todos from '../components/Todos/Todos';\nimport Contact from '../components/Contact/Contact';\nimport { BrowserRouter, Route, NavLink} from 'react-router-dom';\nclass App extends Component {\n\n  state = {\n    // Value of TodoForm.js Input box\n    value: '',\n    // Starting Todos for tutorial\n    todos: [\n      {\n        // Key\n        id: 'kdj3',\n        todoName: 'click this item',\n        // Status will change upon completion\n        status: 'Try to',\n        // Strikethrough is inactive\n        strikeThrough: ''\n      },\n      {\n        // Key\n        id: '4939',\n        todoName: \"click this\",\n        // Status will change upon completion\n        status: 'Click the bottom, ',\n        // Strikethrough is already active\n        strikeThrough: classes.strikethrough\n      }\n    ],\n  }\n\n  // Upon click\n  checkedHandler = (event, id) => {\n    // Find the index of the item that was clicked by searching through todos to find the key that matches it\n    const todoIndex = this.state.todos.findIndex(todo => {\n      return todo.id === id;\n    });\n\n    // Use the index we just found to create a variable (via spread) of the todo that we found at that index\n    const todo = {\n      ...this.state.todos[todoIndex]\n    };\n\n    // Update status and set strikethrough to active for the todo variable we just made\n    todo.strikeThrough = classes.strikethrough;\n    todo.status = 'I no longer need to ';\n\n    // Create a variable (via spread) of the todos we currently have\n    const todos = [...this.state.todos];\n    // Add our updated todo in place of the old todo at todoIndex\n    todos[todoIndex] = todo;\n    // If clicked bottom todo: delete todo\n    if (todoIndex == todos.length - 1) {\n      todos.splice(todoIndex, 1);\n      // If todolist is empty: create a todo item to find more todos\n      if (todos.length == 0) {\n        todos.push(\n          {\n            id: 'kdjkd3',\n            todoName: 'find more to do',\n            status: 'Wow I really need to',\n            strikeThrough: ''\n          }\n        )\n      }\n    }\n    // Otherwise, move the todo to the end\n    else { todos.push(todos.splice(todoIndex, 1)[0]); }\n    // Finally, set state to finished todos array\n    this.setState({ todos: todos })\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    const id = this.state.value.replace(this.state.value[0], String(Math.floor(Math.random() * 1000)));\n    this.setState({\n      todos: [{\n        id: id,\n        todoName: this.state.value,\n        status: 'I need to',\n        strikeThrough: ''\n      },\n      ...this.state.todos\n      ]\n    });\n    this.setState({ value: \"\" });\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className={classes.App}>\n          <header className={classes.NavBar}>\n            <nav>\n              <ul>\n                <li>\n                  <NavLink \n                  activeClassName={classes.active}\n                  to=\"/todos\">Todos</NavLink>\n                </li>\n                <li>\n                  <NavLink \n                  activeClassName={classes.active}\n                  to=\"/contact\">Contact</NavLink>\n                </li>\n              </ul>\n            </nav>\n          </header>\n          <Route path=\"/todos\" render={() => (\n            <div>\n              <TodoForm submit={this.handleSubmit} value={this.state.value} changed={this.handleChange} />\n              <Todos\n                todos={this.state.todos}\n                checked={this.checkedHandler} />\n            </div>\n          )}></Route>\n          <Route path=\"/contact\" component={Contact} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\",\"strikethrough\":\"App_strikethrough__1gs-y\",\"NavBar\":\"App_NavBar__3NvR-\",\"active\":\"App_active__1H0Av\"};"],"sourceRoot":""}