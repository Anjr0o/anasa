{"version":3,"sources":["App.module.css","logo.svg","Todos/Todos.js","Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","todos","props","onSubmit","submit","type","placeholder","value","onChange","changed","children","todo","React","forwardRef","ref","className","classes","onClick","click","status","style","todoName","App","state","id","strikeThrough","strikethrough","checkedHandler","event","todoIndex","findIndex","console","log","length","splice","push","setState","handleChange","target","handleSubmit","replace","String","Math","floor","random","preventDefault","Todos","this","map","index","Todo","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1ed14690.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"strikethrough\":\"App_strikethrough__1Hx-T\",\"todo\":\"App_todo__lu-5O\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nlet todos = (props) => {\n    return (\n        <div>\n            <br/>\n            <div>I need to...</div>\n            <br/>\n            <form onSubmit={props.submit}>\n                <input type=\"text\" placeholder=\"Write a todo list\" value={props.value} onChange={props.changed} />\n            </form>\n            <div>{props.children}</div>\n        </div>\n    )\n}\n\nexport default todos;","import React from 'react';\nimport classes from '../App.module.css';\n\nlet todo = React.forwardRef((props, ref) => {\n    return (\n        <div ref={ref}>\n            <br />\n            <div className={classes.todo}>\n                <span onClick={props.click}>{props.status} </span>\n                <span style={props.style}\n                    className={props.className}\n                    onClick={props.click}>{props.todoName}\n                </span>\n            </div>\n        </div>\n    )\n})\n\nexport default todo;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport classes from './App.module.css';\nimport Todos from './Todos/Todos';\nimport Todo from './Todo/Todo';\nimport FlipMove from 'react-flip-move';\nimport Contact from './Contact/Contact';\nimport styled from 'styled-components';\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    // Tutorial Todos\n    todos: [\n      {\n        id: 'kdj3',\n        todoName: 'click this item',\n        status: 'Try to',\n        strikeThrough: ''\n      },\n      {\n        id: '4939',\n        todoName: \"click this\",\n        status: 'Click the bottom, ',\n        strikeThrough: classes.strikethrough\n      }\n    ],\n  }\n\n  checkedHandler = (event, id) => {\n    const todoIndex = this.state.todos.findIndex(todo => {\n      return todo.id === id;\n    });\n\n    const todo = {\n      ...this.state.todos[todoIndex]\n    };\n\n    console.log(this.state.todos + ' completed');\n    // updates strikethrough effect\n    todo.strikeThrough = classes.strikethrough;\n    todo.status = 'I no longer need to';\n\n    const todos = [...this.state.todos];\n    console.log(todos);\n    todos[todoIndex] = todo;\n    if (todoIndex == todos.length - 1) {\n      todos.splice(todoIndex, 1);\n      if (todos.length == 0) {\n        todos.push(\n          {\n            id: 'kdjkd3',\n            todoName: 'find more to do',\n            status: 'Wow I really need to',\n            strikeThrough: ''\n          }\n        )\n      }\n    }\n    else { todos.push(todos.splice(todoIndex, 1)[0]); }\n    this.setState({ todos: todos })\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    const id = this.state.value.replace(this.state.value[0], String(Math.floor(Math.random() * 1000)));\n    this.setState({\n      todos: [{\n        id: id,\n        todoName: this.state.value,\n        status: 'I need to',\n        strikeThrough: ''\n      },\n      ...this.state.todos\n      ]\n    });\n    this.setState({value: \"\"});\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className={classes.App}>\n          <Todos submit={this.handleSubmit} value={this.state.value} changed={this.handleChange} />\n          <FlipMove>\n            {this.state.todos.map((todo, index) => {\n              return <Todo\n                className={todo.strikeThrough}\n                todoName={todo.todoName}\n                status={todo.status}\n                click={(event) => this.checkedHandler(event, todo.id)}\n                key={todo.id} />\n            })}\n          </FlipMove>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}