{"version":3,"sources":["components/Todos/TodoForm.module.css","components/Todos/TodoForm.js","components/Todos/Todo/Todo.js","components/Todos/Todos.js","components/Contact/Contact.js","containers/App.js","serviceWorker.js","index.js","containers/App.module.css","components/Contact/Contact.module.css"],"names":["module","exports","todos","props","onSubmit","submit","type","placeholder","value","onChange","changed","children","display","className","active","classes","onClick","selected","todo","React","forwardRef","ref","style","click","status","todoName","map","index","Todo","strikeThrough","event","checked","id","key","contact","contactDisplay","contactForm","method","formGroup","firstNameChanged","lastNameChanged","emailChanged","phoneChanged","width","rows","messageChanged","thankYou","App","state","firstName","lastName","email","phone","message","strikethrough","checkedHandler","todoIndex","findIndex","length","splice","push","setState","handleChange","target","handleSelected","handleSubmit","replace","String","Math","floor","random","preventDefault","handleContact","onFirstNameChange","onLastNameChange","onPhoneChange","onEmailChange","onMessageChange","NavBar","activeClassName","to","exact","path","render","TodoForm","Todos","Contact","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a5d4e707.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"TodoForm_active__1UVCD\"};","import React from 'react';\nimport classes from './TodoForm.module.css';\n\nlet todos = (props) => {\n    return (\n        <div>\n            <br/>\n            <span>I need to </span> \n            <form onSubmit={props.submit}>\n                <input type=\"text\" placeholder=\"write a todo list\" value={props.value} onChange={props.changed} />\n            </form>\n            <div>{props.children}</div>\n            <div display='flex'>\n                <button className={props.active === 'All' ? classes.active : ''} onClick={props.selected} value='All'>All</button>\n                <button className={props.active === 'Finished' ? classes.active : ''} value='Finished' onClick={props.selected}>Finished</button>\n                <button className={props.active === 'Unfinished' ? classes.active : ''} value=\"Unfinished\" onClick={props.selected}>Unfinished</button>\n            </div>\n        </div>\n    )\n}\n\nexport default todos;","import React from 'react';\nimport classes from '../../../containers/App.module.css';\n\nlet todo = React.forwardRef((props, ref) => {\n    return (\n        <div style={{ display: (props.selected == 'Finished' && props.className == '') || (props.selected == 'Unfinished' && props.className != '') ? 'none' : 'block' }} ref={ref}>\n            <br />\n            <div className={classes.todo}>\n                <span onClick={props.click}>{props.status} </span>\n                <span\n                    className={props.className}\n                    onClick={props.click}>{props.todoName}\n                </span>\n            </div>\n        </div>\n    )\n})\n\nexport default todo;","import React from 'react';\nimport Todo from './Todo/Todo';\nimport FlipMove from 'react-flip-move';\n\nconst todos = (props) =>\n    <FlipMove>{\n        props.todos.map((todo, index) => {\n            return (\n                <Todo\n                    className={todo.strikeThrough}\n                    todoName={todo.todoName}\n                    status={todo.status}\n                    click={(event) => props.checked(event, todo.id)}\n                    key={todo.id}\n                    selected={props.selected} />\n            )\n        })\n    }\n    </FlipMove>\n\nexport default todos;","import React from 'react';\nimport classes from './Contact.module.css';\n\nconst contact = (props) => {\n    return (\n        <div>\n        <form style={{display: props.contactDisplay}} onSubmit={props.submit} className={classes.contactForm} method=\"POST\">\n            <div className={classes.formGroup}>\n                <input placeholder=\"First Name\" type=\"text\" onChange={props.firstNameChanged}/>\n                <input placeholder=\"Last Name\" type=\"text\" onChange={props.lastNameChanged}/>\n            </div>\n            <div className={classes.formGroup}>\n                <input placeholder=\"Email\" type=\"email\" onChange={props.emailChanged}/>\n                <input placeholder=\"Phone\" type=\"tel\" onChange={props.phoneChanged}/>\n            </div>\n            <div className={classes.formGroup}>\n                <textarea placeholder=\"Message\" style={{display: 'block', width: '100%'}} rows=\"5\" onChange={props.messageChanged}></textarea>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        </form>\n        <div className={classes.thankYou} style={{display: props.display}}>Thank you!</div>\n        </div>\n    )\n}\n\nexport default contact;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport TodoForm from '../components/Todos/TodoForm';\nimport Todos from '../components/Todos/Todos';\nimport Contact from '../components/Contact/Contact';\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\n\nclass App extends Component {\n\n  state = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    message: '',\n    thankYou: 'none',\n    contactDisplay: 'inline-block',\n    selected: 'All',\n    // Value of TodoForm.js Input box\n    value: '',\n    // Starting Todos for tutorial\n    todos: [\n      {\n        // Key\n        id: 'kdj3',\n        todoName: 'click this item',\n        // Status will change upon completion\n        status: 'Try to',\n        // Strikethrough is inactive\n        strikeThrough: ''\n      },\n      {\n        // Key\n        id: '4939',\n        todoName: \"click this\",\n        // Status will change upon completion\n        status: 'Click the bottom, ',\n        // Strikethrough is already active\n        strikeThrough: classes.strikethrough\n      }\n    ],\n  }\n\n  // Upon click\n  checkedHandler = (event, id) => {\n    // Find the index of the item that was clicked by searching through todos to find the key that matches it\n    const todoIndex = this.state.todos.findIndex(todo => {\n      return todo.id === id;\n    });\n\n    // Use the index we just found to create a variable (via spread) of the todo that we found at that index\n    const todo = {\n      ...this.state.todos[todoIndex]\n    };\n\n    // Update status and set strikethrough to active for the todo variable we just made\n    todo.strikeThrough = classes.strikethrough;\n    todo.status = 'I no longer need to ';\n\n    // Create a variable (via spread) of the todos we currently have\n    const todos = [...this.state.todos];\n    // Add our updated todo in place of the old todo at todoIndex\n    todos[todoIndex] = todo;\n    // If clicked bottom todo: delete todo\n    if (todoIndex == todos.length - 1) {\n      todos.splice(todoIndex, 1);\n      // If todolist is empty: create a todo item to find more todos\n      if (todos.length == 0) {\n        todos.push(\n          {\n            id: 'kdjkd3',\n            todoName: 'find more to do',\n            status: 'Wow I really need to',\n            strikeThrough: ''\n          }\n        )\n      }\n    }\n    // Otherwise, move the todo to the end\n    else { todos.push(todos.splice(todoIndex, 1)[0]); }\n    // Finally, set state to finished todos array\n    this.setState({ todos: todos })\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSelected = (event) => {\n    this.setState({ selected: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    const id = this.state.value.replace(this.state.value[0], String(Math.floor(Math.random() * 1000)));\n    this.setState({\n      todos: [{\n        id: id,\n        todoName: this.state.value,\n        status: 'I need to',\n        strikeThrough: ''\n      },\n      ...this.state.todos\n      ]\n    });\n    this.setState({ value: \"\" });\n    event.preventDefault();\n  }\n\n  handleContact = (event) => {\n    event.preventDefault();\n    this.setState({ thankYou: 'block', contactDisplay: 'none' })\n\n  }\n\n  onFirstNameChange = (event) => {\n    this.setState({ firstName: event.target.value })\n  }\n\n  onLastNameChange = (event) => {\n    this.setState({ lastName: event.target.value })\n  }\n\n  onPhoneChange = (event) => {\n    this.setState({ phone: event.target.value })\n  }\n\n  onEmailChange = (event) => {\n    this.setState({ email: event.target.value })\n  }\n\n  onMessageChange = (event) => {\n    this.setState({ message: event.target.value })\n  }\n\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className={classes.App}>\n          <header className={classes.NavBar}>\n            <nav>\n              <ul>\n                <li>\n                  <NavLink\n                    activeClassName={classes.active}\n                    to=\"/anasa\" exact>Todos</NavLink>\n                </li>\n                <li>\n                  <NavLink\n                    activeClassName={classes.active}\n                    to=\"/contact\">Contact</NavLink>\n                </li>\n              </ul>\n            </nav>\n          </header>\n          <Route path=\"/anasa\" exact render={() => (\n            <div>\n              <TodoForm submit={this.handleSubmit} value={this.state.value} active={this.state.selected} selected={this.handleSelected} changed={this.handleChange} />\n              <Todos\n                todos={this.state.todos}\n                checked={this.checkedHandler}\n                selected={this.state.selected} />\n            </div>\n          )}></Route>\n          <Route path=\"/contact\" render={() => (\n            <Contact\n              contactDisplay={this.state.contactDisplay}\n              submit={this.handleContact}\n              firstNameChanged={this.onFirstNameChange}\n              lastNameChanged={this.onLastNameChange}\n              emailChanged={this.onEmailChange}\n              phoneChanged={this.onPhoneChange}\n              messageChanged={this.onMessageChange}\n              display={this.state.thankYou} />\n          )}></Route>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\",\"strikethrough\":\"App_strikethrough__1gs-y\",\"NavBar\":\"App_NavBar__3NvR-\",\"active\":\"App_active__1H0Av\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"Contact_contactForm__2oxDz\",\"active\":\"Contact_active__3bwyd\",\"thankYou\":\"Contact_thankYou__2c1_Z\"};"],"sourceRoot":""}